__Documentation__

- Cookbooks -- have a dedicated "model composition" section in the docs / workspace which using trivial examples
illustrating the use of lists, dicts and multi-level models. Make it clear they are "dumb" examples for illustration.
Make it clear that the model composed links to the results allowing API design.

- Cookbook on prior passing, search chaining.

- Implement starting point API and write docs on this.

- In this section, include docs on writing and loading models / collections with jsons and adding them together. Include
the Dictable object from autoconf.

- Prior arithmatic - based on multiwavelenght models show how we compose models with relations. Also document
and test adding parameters, divisionm, etcx. Can we do this before we introduce summing analysis objects?

- Docs on turning analysis summing and addition features into multiple likelihood functions, write general doc, write howtolens chapter
(c1 same datasets, c2 multi dataset with different parameters, c3 writing function for parameter variation, c4 different LH functions).



- Explicit exampels of how to extend Analsyis (e.g. putting extra data in c0nstructor) for Python beginners.

- Amy was unsure how to use an instance to plot a new component. Show an example where an instance is used

```
class LinearFit:
    def __init__(self, gradient=0.01, intercept=1.0, scatter=0.1):

        self.intercept = intercept
        self.gradient = gradient
        self.scatter = scatter

    def profile_from_xvalues(self, xvalues):

        return np.multiply(self.gradient, xvalues) + self.intercept

instance = result.samples.max_log_likelihood_instance

instance.profile_from_xvalues(xvalues=hi)

matplotlib stuff.
```

__Samples__

 - Have as_instance=True default argument in all Samples objects. Use decorator to implement the output.

__Searches__

- LBFGS: Limits on parameters, callback history.


__Database__

- Database: profiling tests, speed ups and tools. Use test mode to quickly generate large result libearies.
- Database Storage, not needing full Dynesty etc, only store basics, no properties so we can remake each object.


__Graphical Models__

- Graphical models: model.info file, on-the-fly summary file, output of KL divergence / evidence in factors,
  model.results of overall model. For output, include a single file which is the latest results and a folder with
  all factor results, tilted, etc. FactorGraphResult.


